#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# The default configuration ensures every patch includes a Signed-off-by
# trailer and that no added lines or subjects contain placeholder tokens.
# Adjust or extend the checks below to suit your workflow.

validate_cover_letter () {
        file="$1"
        if test ! -s "$file"
        then
                echo "sendemail-validate: cover letter appears to be empty" >&2
                return 1
        fi

        if grep -Eiq '(TODO|FIXME|WIP|TBD)' "$file"
        then
                echo "sendemail-validate: placeholder token detected in cover letter" >&2
                return 1
        fi

        true
}

TOKEN_PLACE_SUBJECTS_FILE="${TOKEN_PLACE_SUBJECTS_FILE:-}"
TOKEN_PLACE_SUBJECTS_FILE_CONFIG_KEY="sendemail.validateSubjectsFile"

validate_patch () {
        file="$1"

        if test -z "$file" || test ! -f "$file"
        then
                echo "sendemail-validate: patch file missing" >&2
                return 1
        fi

        # Ensure that the patch applies without conflicts unless we're running
        # in import-only mode for unit tests.
        if test "${TOKEN_PLACE_VALIDATE_IMPORT_ONLY:-0}" != 1
        then
                git am -3 "$file" || return
        fi

        if ! grep -Eq '^Signed-off-by:' "$file"
        then
                echo "sendemail-validate: missing Signed-off-by trailer" >&2
                return 1
        fi

        if grep -Eq '^\+.*(TODO|FIXME|WIP|TBD)' "$file"
        then
                echo "sendemail-validate: placeholder token detected in patch" >&2
                return 1
        fi

        if test -n "$TOKEN_PLACE_SUBJECTS_FILE"
        then
                subject=$(sed -n 's/^Subject: //p' "$file" | head -n 1)
                printf '%s\n' "$subject" >>"$TOKEN_PLACE_SUBJECTS_FILE"
        fi

        true
}

validate_series () {
        status=0

        if test -z "$TOKEN_PLACE_SUBJECTS_FILE"
        then
                TOKEN_PLACE_SUBJECTS_FILE=$(git config --get "$TOKEN_PLACE_SUBJECTS_FILE_CONFIG_KEY" 2>/dev/null || printf '')
        fi

        if test -n "$TOKEN_PLACE_SUBJECTS_FILE" && test -f "$TOKEN_PLACE_SUBJECTS_FILE"
        then
                while IFS= read -r subject
                do
                        test -n "$subject" || continue

                        if printf '%s' "$subject" | grep -Eiq '\b(WIP|TODO|FIXME|TBD)\b'
                        then
                                echo "sendemail-validate: placeholder token detected in series subject" >&2
                                status=1
                        fi
                done <"$TOKEN_PLACE_SUBJECTS_FILE"
        fi

        return $status
}

# main -------------------------------------------------------------------------

if test "${TOKEN_PLACE_VALIDATE_IMPORT_ONLY:-0}" != 1
then
        if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
        then
                remote=$(git config --default origin --get sendemail.validateRemote) &&
                ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
                worktree=$(mktemp -d "${TMPDIR:-/tmp}/sendemail-validate.XXXXXXX") &&
                git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
                git config --replace-all sendemail.validateWorktree "$worktree" &&
                TOKEN_PLACE_SUBJECTS_FILE=$(mktemp "${TMPDIR:-/tmp}/sendemail-validate-subjects.XXXXXXX") &&
                git config --replace-all "$TOKEN_PLACE_SUBJECTS_FILE_CONFIG_KEY" "$TOKEN_PLACE_SUBJECTS_FILE"
        else
                worktree=$(git config --get sendemail.validateWorktree) &&
                TOKEN_PLACE_SUBJECTS_FILE=$(git config --get "$TOKEN_PLACE_SUBJECTS_FILE_CONFIG_KEY")
        fi || {
                echo "sendemail-validate: error: failed to prepare worktree" >&2
                exit 1
        }

        unset GIT_DIR GIT_WORK_TREE
        cd "$worktree" &&

        if grep -q "^diff --git " "$1"
        then
                validate_patch "$1"
        else
                validate_cover_letter "$1"
        fi &&

        if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
        then
                git config --unset-all sendemail.validateWorktree &&
                git config --unset-all "$TOKEN_PLACE_SUBJECTS_FILE_CONFIG_KEY" &&
                trap 'git worktree remove -ff "$worktree"; test -n "$TOKEN_PLACE_SUBJECTS_FILE" && rm -f "$TOKEN_PLACE_SUBJECTS_FILE"' EXIT &&
                validate_series
        fi
fi
