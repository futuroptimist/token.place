<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="description" content="p2p generative AI marketplace">
    <meta name="keywords" content="Large Language Model, LLM, AI, genai, P2P">
    <link rel="icon" href="/static/icon.ico" type="image/vnd.microsoft.icon">
    <title>token.place</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background-color: #222222; /* Default to dark mode background */
            color: #ffffff; /* Default to dark mode text color */
        }
        .container {
            width: 50%;
            margin-left: auto; /* Center the container horizontally */
            margin-right: auto; /* Center the container horizontally */
        }
        h1, h2, h3, p {
            margin: 10px 0;
        }
        /* Chat styles */
        .chat-container {
            border: 1px solid #ddd;
            padding: 10px;
            margin-top: 20px;
            border-radius: 5px;
        }
        .message-input {
            width: 100%;
            padding: 10px;
            box-sizing: border-box; /* Ensures padding doesn't increase total width */
            margin-top: 10px;
        }
        .message {
            padding: 10px;
            margin: 5px 0; /* Spacing between messages */
            border-radius: 10px;
            background-color: #f9f9f9;
        }
        .user-message {
            text-align: right;
        }
        .assistant-message {
            text-align: left;
            background-color: #e0e0e0; /* Slightly darker than user message */
        }
        /* Responsive styles */
        @media (max-width: 768px) {
            .container {
                width: 90%;
            }
            h1, h2, h3, p {
                padding: 0 10px; /* Slight padding to prevent text from hitting the edges */
            }
            .message-input {
                padding: 15px; /* Larger touch target */
                font-size: 16px; /* Legibility */
            }
            .message {
                padding: 15px; /* More visual space */
                font-size: 14px; /* Adjust text size for readability */
            }
            [v-cloak] {
                display: none; /* Hide Vue.js elements until they are ready */
            }
        }

        .input-container {
            display: flex; /* This will align the input and button in a row */
        }

        .message-input {
            flex-grow: 1; /* This will make the input field grow to fill the container */
            padding: 10px;
            margin-top: 10px;
            border-top-left-radius: 4px; /* Rounded corners for the left side of the input field */
            border-bottom-left-radius: 4px; /* Same as above */
            border-right: none; /* Removes the right border to merge input and button visually */
        }

        .send-button {
            padding: 10px;
            margin-top: 10px;
            border-top-right-radius: 4px; /* Rounded corners for the right side of the button */
            border-bottom-right-radius: 4px; /* Same as above */
            background-color: #e0e0e0; /* Bootstrap primary button color for example */
            color: black;
            border: 1px solid #000000; /* Same color as background for a solid look */
            cursor: pointer; /* Changes the cursor to indicate the button is clickable */
        }

        .send-button:hover {
            background-color: #0056b3; /* Darker shade for hover effect */
        }

        /* Responsive styles */
        @media (max-width: 768px) {
            .input-container {
                flex-direction: column; /* Stack input and button on top of each other */
            }

            .message-input,
            .send-button {
                width: 100%; /* Full width in a stacked layout */
                border-radius: 4px; /* Restore all-round rounded corners */
            }

            .send-button {
                border-top: 1px solid #b9b9b9; /* Add top border to button when stacked */
            }
        }

        body.light-mode {
            background-color: #ffffff; /* Light background */
            color: #000000; /* Dark text */
        }

        body.dark-mode {
                background-color: #222222;
                color: #ffffff; /* Light text */

            .message {
                background-color: #777777;
                color: #CCCCCC;
            }

            .assistant-message {
                background-color: #333333; /* Dark background */
            }

            a:link {
                color: #00a0e4; /* Light blue for links */
            }

            a:visited {
                color: #83a2af; /* Light blue for visited links */
            }

        }

        .chat-container, .message {
            transition: background-color 0.3s ease; /* Smooth transition for backgrounds */
        }

        /* Mode Toggle Button */
        .mode-toggle-container {
            display: flex;
            justify-content: center;
            padding: 20px;
        }

        #toggleMode {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            background-color: #009688; /* Teal background */
            color: white; /* White text */
        }

        #toggleMode:hover {
            background-color: #00796b; /* Darker teal on hover */
        }

        /* Responsive styles */
        @media (max-width: 768px) {
            /* Existing responsive styles */
        }
    </style>
</head>
<body>
    <div id="app" class="container">
        <h1>Welcome to token.place!</h1>
        <p>tokenplace is a peer-to-peer generative AI platform that pairs those in need of LLM compute with individuals donating spare resources, aiming to democratize AI access.</p>

        <hr>

        <h2>Try it out:</h2>
        <div class="chat-container" v-cloak>
            <div v-for="message in chatHistory" :class="{'user-message': message.role === 'user', 'assistant-message': message.role === 'assistant'}" class="message">
                {{ message.content }}
            </div>
            <div class="input-container">
                <input type="text" v-model="newMessage" @keyup.enter="sendMessage" class="message-input" placeholder="Type your message here...">
                <button @click="sendMessage" class="send-button">Send</button>
            </div>
        </div>

        <hr>

        <h2>API</h2>
        <p>Coming soon!</p>

        <hr>

        <h2>FAQ</h2>
        <h3>Why token.place?</h3>
        <p>We believe in the democratization of AI. Projects like Folding@Home inspired us to leverage peer-to-peer technology for generative AI, making sophisticated language models accessible to everyone.</p>
        <h3>Is it really free?</h3>
        <p>Yes, thanks to our generous compute donors. We aim to keep it free, no strings attached, to ensure universal access to advanced AI.</p>
        <h3>How do I contribute?</h3>
        <p>You can contribute by donating compute resources or by participating in our community on GitHub. Every bit helps us grow and improve.</p>
        <p>Learn more about our goals and how you can be a part of this initiative on our <a href="https://github.com/futuroptimist/token.place">GitHub repository</a>.</p>

        <h3>Privacy Notice</h3>
        <p><strong>WARNING! Your converstation is reasonably private at this moment, and base privacy will become incrementally better over time. For enhanced privacy, consider self hosting by following the README on the Github repository.</strong></p>

        
        <div class="mode-toggle-container">
            <button id="toggleMode"></button>
        </div>
    </div>

    <!-- Vue.js -->
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <script src="/static/chat.js"></script>

    <script>
        // Wait for the DOM to load
        document.addEventListener('DOMContentLoaded', function() {
            const toggleModeButton = document.getElementById('toggleMode');
            // Initial setting
            let isDarkMode = false;
            document.body.classList.add('light-mode');
      
            // Function to switch the theme
            const switchTheme = () => {
                if (isDarkMode) {
                    document.body.classList.remove('dark-mode');
                    document.body.classList.add('light-mode');
                    toggleModeButton.textContent = 'üåô switch to dark mode'; // Moon emoji for dark mode
                } else {
                    document.body.classList.remove('light-mode');
                    document.body.classList.add('dark-mode');
                    toggleModeButton.textContent = '‚òÄÔ∏è switch to light mode'; // Sun emoji for light mode
                }
            };
      
            // Click event listener for the button
            toggleModeButton.addEventListener('click', function() {
                isDarkMode = !isDarkMode; // Toggle the state
                switchTheme(); // Call the function to switch themes
            });
      
            // Initialize the theme
            switchTheme();
        });
      </script>

</body>
</html>